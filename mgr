#!/bin/bash

# Colors
BLACK='\033[1;30m'
RED='\033[1;31m'
GREEN='\033[1;32m'
CYAN='\033[1;33m'
BLUE='\033[1;34m'
YELLOW='\033[1;36m'
WHITE='\033[1;37m'
LIGHT_GREEN='\033[0;32m'


form_top="
  linux_manager -- $(basename "$0") -- Automate common programming tasks on Linux

"

usage="
    Options:      Syntax:                             Description:

    -h            [mgr -h]                            show this help text
    -g            [mgr -g 'commit message']           Git add,commit, and push to Git in the current directory. Also uses the Github API
    -p            [mgr -p]                            Creates a project folder with Python virtual Environment and requirements.txt

"

usage_git="
    Options:      Syntax:                             Description:
  
    -g            [mgr -g 'commit message']           Git add,commit, and push to Git in the current directory.
    token         [mgr -g token]                      Creates a environment var with your Token to call the Github API
    repo          [mgr -g repo]                       Creates a repo on Github

"
usage_git_repo="
    Options:      Syntax:                             Description:

    repo          [mgr -g repo name private]          Creates a repo on Github
    name          [mgr -g repo newproject private]    Represent the name of the repo
    private       [mgr -g repo newproject true]       Bool 'true' or 'false' to set the repo public or private

"

usage_python_venv="
    Options:      Syntax:                             Description:
  
    -p            [mgr -p]                            shows this help message
    venv          [mgr -p venv]                       Creates a Python virtual Environment and requirements.txt
    <name>        [mgr -p projectname]                Creates a project folder with Python virtual Environment and requirements.txt

"

automatic_git () {
  {
      COMMAND=$(git add .)
  }
  CMD_RETURN_CODE=$?

  echo -e "${YELLOW} --- Push changes to git repo ---"
    if [ $CMD_RETURN_CODE != 0 ]; then
        echo -e "${RED}Failed"
        git add .
    else
      echo -e "${LIGHT_GREEN}Success ${WHITE}"
      git add . && git commit -m "$1" && git push
    fi
}

setup_python_venv () {
  python3 -m venv .venv
  source .venv/bin/activate
  pip install --upgrade pip
  if [ -f requirements.txt ]; then
    pip install -r requirements.txt
  else
    touch requirements.txt
  fi
  code .
}

setup_python_project () {
  PROJECT_NAME=$1
  mkdir $PROJECT_NAME
  cd $PROJECT_NAME
  setup_python_venv
}

create_github_token () {
  read -p "Set your Github Token: " github_token
  echo $github_token > token
}

create_github_repo () {
  if [ ! -f ./token ]; then
    create_github_token
  fi
  TOKEN=$(cat token)
  curl \
    -X POST \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: token $TOKEN" \
    -d '{"name":"'$1'","private":"'$2'", "homepage":"https://github.com"}' \
    https://api.github.com/user/repos
}

no_args="true"
if [ -z $OPTIND-1 ]; then echo "$form_top $usage"; fi
while getopts ':-hgp' option; do
  case "$option" in
    h) echo "$form_top $usage"
       exit
       ;;
    g)
      if [ -z $2 ]; then
        echo "$form_top $usage_git"
      else
        case $2 in
          token)
            create_github_token
            ;;
          repo)
            if [ -z $3 ]; then
              echo "$form_top $usage_git_repo"
            else
              if [ -z $4 ]; then 
                $4="true"
              fi
              create_github_repo $3 $4
            fi
            ;;
          *)
            automatic_git $2
            ;;
        esac
      fi
      ;;
    p)
      if [ -z $2 ]; then
        echo "$form_top $usage_python_venv"
      else
        case $2 in
          venv)
            setup_python_venv
            ;;
          *)
            setup_python_project $2
            ;;
        esac
      fi
      ;;
   \?) echo "illegal option:" "$OPTARG" >&2
       echo "$form_top $usage" >&2
       exit 1
       ;;
  esac
  no_args="false"
done

[[ "$no_args" == "true" ]] && { echo "$form_top $usage"; exit 1; }
shift "$(($OPTIND-1))"

