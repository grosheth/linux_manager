#!/bin/bash

# Colors
BLACK='\033[1;30m'
RED='\033[1;31m'
GREEN='\033[1;32m'
CYAN='\033[1;33m'
BLUE='\033[1;34m'
YELLOW='\033[1;36m'
WHITE='\033[1;37m'
LIGHT_GREEN='\033[0;32m'


form_top="
  linux_manager -- $(basename "$0") -- Automates stuff on Linux

"

usage="
  Options:      Syntax:                             Description:

      -b        [mgr -b /full/path/to/backup/]      Create a backup for your bookmarks, .ssh folder, .zshrc and .bashrc
      -g        [mgr -g 'commit message']           Git add,commit, and push to Git in the current directory.
      -h        [mgr -h]                            show this help text
      -n        [mgr -n dns]                            Change your DNS, Static IP address, VPN. (NetworkManager)

"

usage_git="
  Options:      Syntax:                             Description:
  
      -g        [mgr -g 'commit message']           Git add,commit, and push to Git in the current directory.


"

usage_backup="
  Options:      Syntax:                             Description:
  
      -b        [mgr -b /full/path/to/backup/]      Create a backup for your bookmarks, .ssh folder, .zshrc and .bashrc


"
usage_network="
  Options:      Syntax:                             Description:
  
      -n        [mgr -n]                            Shows this message
      ip        [mgr -n ip]                         Change your Static IP address
      dns       [mgr -n dns]                        Change your DNS


"


automatic_git () {
  {
      COMMAND=$(git checkout -b "verif_branch" && git add . && git commit -m "$1" && git push && git checkout main && git branch --delete verif_branch)
  }
  CMD_RETURN_CODE=$?

  echo -e "${YELLOW} --- Push changes to git repo ---"
    if [ $CMD_RETURN_CODE != 0 ]; then
        echo -e "${RED}Failed"
        echo $COMMAND
    else
      echo -e "${LIGHT_GREEN}Success ${WHITE}"
      git add . && git commit -m "$1" && git push --set-upstream origin verif_branch
    fi
}

backup_files () { 
  echo -e "${YELLOW} --- Creating Backups ---${WHITE}"

  [ -d $1 ] || mkdir $1
  cp -R ~/.ssh $1
  cp ~/.zshrc $1
  cp ~/.bashrc $1
  echo -e "${LIGHT_GREEN} --- Success ---"
}

setup_dns () {
  echo -e "${YELLOW} --- Change your DNS --- ${WHITE}"
  echo "Your actual DNS:  "
  grep "nameserver" /etc/resolv.conf
  read -n 1 -p "Do you want to add a new DNS or modify one?:" dns_change


}

setup_ip () {
  echo -e "${YELLOW} --- Change your IP Address --- ${WHITE}"
  echo "Here are your Network cards:  "
  ip a
  read  -n 1 -p "Which Network card do you want to modify?:" network_card


}

setup_python_venv () {
  APP_NAME="$1"
  cd
  cd Desktop/
  mkdir $APP_NAME
  cd $APP_NAME
  python -m venv newenv
  source newenv/bin/activate
  pip install --upgrade pip
  pip install -r requirements.txt
  code .
}


while getopts ':-hbgn' option; do
  case "$option" in
    h) echo "$form_top $usage"
       exit
       ;;
    b)
      if [ -z $2 ]; then
        echo "$form_top $usage_backup"
      else
        backup_files $2
      fi
      ;;
    g)
      if [ -z $2 ]; then
        echo "$form_top $usage_git"
      else
        automatic_git $2
      fi
      ;;
    n)
      if [ -z $2 ]; then
        echo "$form_top $usage_network"
      else
        case $2 in
          dns)
            setup_dns
            ;;
          ip)
            setup_ip
            ;;
        esac
      fi
      ;;
   \?) echo "illegal option:" "$OPTARG" >&2
       echo "$form_top $usage" >&2
       exit 1
       ;;
  esac
done

shift "$(($OPTIND -1))"
