#!/bin/bash

# Version
VERSION='1.0.0'

# Colors
BLACK='\033[0;30m'
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;33m'
BLUE='\033[0;34m'
YELLOW='\033[0;36m'
WHITE='\033[0;37m'


form_top="
  linux_manager -- $(basename "$0") $VERSION -- Automate common programming tasks on Linux

"

usage="
    Options:      Syntax:                                          Description:

    -g            [$(basename "$0") -g 'commit message']           Simplify Git commands. Can also use GitHub API.
    -p            [$(basename "$0") -p]                            Creates a project folder with Python virtual Environment and requirements.txt
    -a            [$(basename "$0") -a]                            Manages Application can manage some services on systemd (Needs sudo)
    -u            [$(basename "$0") -u]                            Updates current System (Needs sudo)
    -v            [$(basename "$0") -v]                            Current version of mgr
    -d            [$(basename "$0") -d]                            Install dependencies from dependencies file (Needs sudo)


"

usage_git="
    Options:      Syntax:                                          Description:

    -g            [$(basename "$0")  -g 'commit message']          Git add,commit, and push to Git in the current directory.
    token         [$(basename "$0") -g token]                      Creates a environment var with your Token to call the Github API
    repo          [$(basename "$0") -g repo]                       Creates a repo on Github
    init          [$(basename "$0") -g init]                       Send the current repo on Github. This will create the repo on Github if it doesn't exist.

"
usage_git_repo="
    Options:      Syntax:                                          Description:

    repo          [$(basename "$0") -g repo name private]          Creates a repo on Github
    name          [$(basename "$0") -g repo newproject private]    Name of the repo you want to create
    private       [$(basename "$0") -g repo newproject true]       Bool 'true' or 'false' to set the repo public or private

"

usage_git_init="
    Options:      Syntax:                                            Description:

    init          [$(basename "$0") -g init name private]            Send the current repo on Github. This will create the repo if it doesn't exist.
    user          [$(basename "$0") -g init user name private]       Your Github username.
    name          [$(basename "$0") -g init user project private]    Name of the repo you want to create
    private       [$(basename "$0") -g init user project true]       Bool 'true' or 'false' to set the repo public or private

"

usage_python_venv="
    Options:      Syntax:                                          Description:

    -p            [$(basename "$0") -p]                            shows this help message
    venv          [$(basename "$0") -p venv]                       Creates a Python virtual Environment and requirements.txt
    <name>        [$(basename "$0") -p projectname]                Creates a project folder with Python virtual Environment and requirements.txt

"

usage_install_dependencies="
    Options:      Syntax:                                          Description:

    -d            [$(basename "$0") -d]                            shows this help message
    list          [$(basename "$0") -d list]                       lists the current dependencies to install
    add           [$(basename "$0") -d add <package name>]         Add dependencies to $HOME/$(basename "$0")/dependencies
    install       [$(basename "$0") -d install]                    Install the dependencies located in $HOME/$(basename "$0")/dependencies
"


automatic_git () {
  {
      COMMAND=$(git add .)
  }
  CMD_RETURN_CODE=$?
  STRING=$@
  
  echo -e "${YELLOW} --- Push changes to git repo ---"
    if [ $CMD_RETURN_CODE != 0 ]; then
        echo -e "${RED}Failed"
        git add .
    else
      echo -e "${GREEN}Success ${WHITE}"
      git add . && git commit -m "${STRING}" && git push
    fi
}

setup_python_venv () {
  python3 -m venv .venv
  source .venv/bin/activate
  pip install --upgrade pip
  if [ -f requirements.txt ]; then
    pip install -r requirements.txt
  else
    touch requirements.txt
  fi
  code .
}

setup_python_project () {
  PROJECT_NAME=$1
  mkdir $PROJECT_NAME
  cd $PROJECT_NAME
  setup_python_venv
}

add_github_token () {
  read -p "Set your Github Token: " github_token
  echo $github_token > ~/.mgr/token
}


create_github_repo () {
  if [ ! -f ~/.$(basename "$0")/token ]; then
    add_github_token
  fi
  TOKEN=$(cat ~/.$(basename "$0")/token)
  curl \
    -X POST \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: token $TOKEN" \
    -d '{"name":"'$1'","private":"'$2'", "homepage":"https://github.com"}' \
    https://api.github.com/user/repos
}

github_init () {

  [ -f ~/.$(basename "$0")/token ] || add_github_token
  TOKEN=$(cat ~/.mgr/token)
  COMMAND=$(curl -X GET -H "Authorization: token $TOKEN" https://api.github.com/repos/$1/$2 | grep "Not Found")

  if [ ! -z "$COMMAND" ]; then
    create_github_repo $2 $3
  fi

  git init
  git remote add $2 git@github.com:$1/$2.git

}

check_system () {
  {
      COMMAND=$(cat /etc/os-release)
  }
  CMD_RETURN_CODE=$?

  if [ $CMD_RETURN_CODE != 0 ]; then
    echo -e "${RED}No os-release file was found on the server"
  else
    SYSTEM=$(cat /etc/os-release)
  fi

}

update_system () {
  check_system

  if [ -z $SYSTEM ]; then
    echo "make sure /etc/os-release file or symbolic link exists"
  else

    if [[ $SYSTEM == *"arch"* ]]; then
      echo -e "${GREEN}According to os-release, your system is Arch based \n$SYSTEM ${WHITE}"
      sleep 0.1
      sudo pacman -Syu --noconfirm
    fi

    if [[ $SYSTEM == *"debian"* ]]; then
      echo -e "${GREEN}According to os-release, your system is Debian based \n$SYSTEM ${WHITE}"
      sleep 0.1
      sudo apt-get update && sudo apt-get upgrade -y
    fi

    if [[ $SYSTEM == *"fedora"* ]]; then
      echo -e "${GREEN}According to os-release, your system is Fedora \n$SYSTEM ${WHITE}"
      sleep 0.1
      sudo dnf upgrade -y
    fi

  fi

}

add_dependencies () {
  LIST=$@

  for package in $LIST
  do
    if [[ ${package} != '-d' && ${package} != 'add' ]]; then
      echo -e ${package} >> $HOME/.$(basename "$0")/dependencies
    fi
  done

}

install_dependencies () {
  check_system

    PACKAGE_LIST=$(cat $HOME/.$(basename "$0")/dependencies)

    if [[ $SYSTEM == *"arch"* ]]; then
      echo -e "${GREEN}According to os-release, your system is Arch based \n ${WHITE}"
      
      for package in $PACKAGE_LIST
      do
        echo -e "${GREEN}Installing ${package} ${WHITE}"
        sudo pacman -S ${package} --noconfirm
      done
    fi

    if [[ $SYSTEM == *"debian"* ]]; then
      echo -e "${GREEN}According to os-release, your system is Debian based \n${WHITE}"
      for package in $PACKAGE_LIST
      do
        echo -e "${GREEN}Installing ${package} ${WHITE}"
        sudo apt-get install ${package}  -y
      done
    fi

    if [[ $SYSTEM == *"fedora"* ]]; then
      echo -e "${GREEN}According to os-release, your system is Fedora \n ${WHITE}"
      for package in $PACKAGE_LIST
      do
        echo -e "${GREEN}Installing ${package} ${WHITE}"
        sudo dnf install ${package} -y
      done
    fi

}

no_args="true"
if [ -z $OPTIND-1 ]; then echo "$form_top $usage"; fi
while getopts ':-gpuavd' option; do
  case "$option" in
    g)
      if [ -z $2 ]; then
        echo "$form_top $usage_git"
      else
        case $2 in
          token)
            add_github_token
            ;;
          repo)
            if [ -z $3 ]; then
              echo "$form_top $usage_git_repo"
            else
              if [ -z $4 ]; then
                private="true"
              else
                private=$4
              fi
              create_github_repo $3 private
            fi
            ;;
          init)
            if [ -z $3 ]; then
              echo "$form_top $usage_git_init"
            else
              if [ -z $5 ]; then
                private="true"
              else
                private=$5
              fi
                github_init $3 $4 private
            fi
            ;;
          *)
            automatic_git $2
            ;;
        esac
      fi
      ;;
    p)
      if [ -z $2 ]; then
        echo "$form_top $usage_python_venv"
      else
        case $2 in
          venv)
            setup_python_venv
            ;;
          *)
            setup_python_project $2
            ;;
        esac
      fi
      ;;
    u)
      update_system
      ;;
    d)
      if [ -z $2 ]; then
        echo "$form_top $usage_install_dependencies"
      else
        case $2 in
          list)
            cat ~/.$(basename "$0")/dependencies
            ;;
          add)
            add_dependencies $@
            ;;
          clear)
            echo "" >  ~/.$(basename "$0")/dependencies
            ;;
          install)
            install_dependencies
            ;;
          *)
            echo "$form_top $usage_install_dependencies"
            ;;
        esac
      fi
      ;;
    v)
      echo $VERSION
      ;;
   \?) echo "illegal option:" "$OPTARG" >&2
       echo "$form_top $usage" >&2
       exit 1
       ;;
  esac
  no_args="false"
done

[ -d ~/.$(basename "$0") ] || mkdir ~/.$(basename "$0")
[[ "$no_args" == "true" ]] && { echo "$form_top $usage"; exit 1; }
shift "$(($OPTIND-1))"

